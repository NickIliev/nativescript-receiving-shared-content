"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("tns-core-modules/application");
var page_1 = require("tns-core-modules/ui/page/page");
var vm = new page_1.Observable();
function navigatingTo(args) {
    var page = args.object;
    page.bindingContext = vm;
    application.android.on(application.AndroidApplication.activityCreatedEvent, function (args) {
        var activity = args.activity;
        // Get intent, action and MIME type
        var intent = activity.getIntent();
        var action = intent.getAction();
        var type = intent.getType();
        if (android.content.Intent.ACTION_SEND === action && type != null) {
            if (type.startsWith("text/")) {
                handleSendText(intent); // Handle text being sent
            }
            else if (type.startsWith("image/")) {
                handleSendImage(intent); // Handle single image being sent
            }
        }
        else if (android.content.Intent.ACTION_SEND_MULTIPLE === action && type != null) {
            if (type.startsWith("image/")) {
                handleSendMultipleImages(intent); // Handle multiple images being sent
            }
        }
        else {
            // Handle other intents, such as being started from the home screen
        }
    });
}
exports.navigatingTo = navigatingTo;
function handleSendText(intent) {
    var sharedText = intent.getStringExtra(android.content.Intent.EXTRA_TEXT);
    if (sharedText != null) {
        // Update UI to reflect text being shared
        console.log("sharedText: ", sharedText);
        console.log("Text received!");
        vm.set("sharedText", sharedText);
    }
}
function handleSendImage(intent) {
    var imageUri = intent.getParcelableExtra(android.content.Intent.EXTRA_STREAM);
    if (imageUri != null) {
        // Update UI to reflect image being shared
        console.log("Image received!");
        var appContext = application.android.context;
        var bitmap = android.provider.MediaStore.Images.Media.getBitmap(appContext.getContentResolver(), imageUri);
        console.log("bitmap: ", bitmap);
        vm.set("bitmap", bitmap);
    }
}
function handleSendMultipleImages(intent) {
    var imageUris = intent.getParcelableArrayListExtra(android.content.Intent.EXTRA_STREAM);
    if (imageUris != null) {
        // Update UI to reflect multiple images being shared
        console.log("imageUris: ", imageUris);
        console.log("Multiple images received!");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMERBQTREO0FBQzVELHNEQUE0RTtBQUM1RSxJQUFJLEVBQUUsR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztBQUUxQixzQkFBNkIsSUFBZTtJQUV4QyxJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTdCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBRXpCLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsRUFBRSxVQUFVLElBQUk7UUFDdEYsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM3QixtQ0FBbUM7UUFDbkMsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2xDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoQyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFNUIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMseUJBQXlCO1lBQ3JELENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGlDQUFpQztZQUM5RCxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1lBQzFFLENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixtRUFBbUU7UUFDdkUsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQztBQTVCRCxvQ0E0QkM7QUFFRCx3QkFBd0IsTUFBOEI7SUFDbEQsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxRSxFQUFFLENBQUMsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQix5Q0FBeUM7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7QUFDTCxDQUFDO0FBRUQseUJBQXlCLE1BQThCO0lBQ25ELElBQUksUUFBUSxHQUFvQixNQUFNLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0YsRUFBRSxDQUFDLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkIsMENBQTBDO1FBRTFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUUvQixJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUM3QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUMxRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVoQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0wsQ0FBQztBQUVELGtDQUFrQyxNQUE4QjtJQUM1RCxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsMkJBQTJCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEYsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEIsb0RBQW9EO1FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgYXBwbGljYXRpb24gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IFBhZ2UsIE9ic2VydmFibGUsIEV2ZW50RGF0YSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UvcGFnZVwiO1xubGV0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcblxuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xuXG4gICAgYXBwbGljYXRpb24uYW5kcm9pZC5vbihhcHBsaWNhdGlvbi5BbmRyb2lkQXBwbGljYXRpb24uYWN0aXZpdHlDcmVhdGVkRXZlbnQsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIGxldCBhY3Rpdml0eSA9IGFyZ3MuYWN0aXZpdHk7XG4gICAgICAgIC8vIEdldCBpbnRlbnQsIGFjdGlvbiBhbmQgTUlNRSB0eXBlXG4gICAgICAgIGxldCBpbnRlbnQgPSBhY3Rpdml0eS5nZXRJbnRlbnQoKTtcbiAgICAgICAgbGV0IGFjdGlvbiA9IGludGVudC5nZXRBY3Rpb24oKTtcbiAgICAgICAgbGV0IHR5cGUgPSBpbnRlbnQuZ2V0VHlwZSgpO1xuXG4gICAgICAgIGlmIChhbmRyb2lkLmNvbnRlbnQuSW50ZW50LkFDVElPTl9TRU5EID09PSBhY3Rpb24gJiYgdHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZS5zdGFydHNXaXRoKFwidGV4dC9cIikpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVTZW5kVGV4dChpbnRlbnQpOyAvLyBIYW5kbGUgdGV4dCBiZWluZyBzZW50XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUuc3RhcnRzV2l0aChcImltYWdlL1wiKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZVNlbmRJbWFnZShpbnRlbnQpOyAvLyBIYW5kbGUgc2luZ2xlIGltYWdlIGJlaW5nIHNlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhbmRyb2lkLmNvbnRlbnQuSW50ZW50LkFDVElPTl9TRU5EX01VTFRJUExFID09PSBhY3Rpb24gJiYgdHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZS5zdGFydHNXaXRoKFwiaW1hZ2UvXCIpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlU2VuZE11bHRpcGxlSW1hZ2VzKGludGVudCk7IC8vIEhhbmRsZSBtdWx0aXBsZSBpbWFnZXMgYmVpbmcgc2VudFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSGFuZGxlIG90aGVyIGludGVudHMsIHN1Y2ggYXMgYmVpbmcgc3RhcnRlZCBmcm9tIHRoZSBob21lIHNjcmVlblxuICAgICAgICB9XG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gaGFuZGxlU2VuZFRleHQoaW50ZW50OiBhbmRyb2lkLmNvbnRlbnQuSW50ZW50KSB7XG4gICAgbGV0IHNoYXJlZFRleHQgPSBpbnRlbnQuZ2V0U3RyaW5nRXh0cmEoYW5kcm9pZC5jb250ZW50LkludGVudC5FWFRSQV9URVhUKTtcbiAgICBpZiAoc2hhcmVkVGV4dCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBVSSB0byByZWZsZWN0IHRleHQgYmVpbmcgc2hhcmVkXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2hhcmVkVGV4dDogXCIsIHNoYXJlZFRleHQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRleHQgcmVjZWl2ZWQhXCIpO1xuICAgICAgICB2bS5zZXQoXCJzaGFyZWRUZXh0XCIsIHNoYXJlZFRleHQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlU2VuZEltYWdlKGludGVudDogYW5kcm9pZC5jb250ZW50LkludGVudCkge1xuICAgIGxldCBpbWFnZVVyaSA9IDxhbmRyb2lkLm5ldC5Vcmk+aW50ZW50LmdldFBhcmNlbGFibGVFeHRyYShhbmRyb2lkLmNvbnRlbnQuSW50ZW50LkVYVFJBX1NUUkVBTSk7XG4gICAgaWYgKGltYWdlVXJpICE9IG51bGwpIHtcbiAgICAgICAgLy8gVXBkYXRlIFVJIHRvIHJlZmxlY3QgaW1hZ2UgYmVpbmcgc2hhcmVkXG5cbiAgICAgICAgY29uc29sZS5sb2coXCJJbWFnZSByZWNlaXZlZCFcIik7XG5cbiAgICAgICAgbGV0IGFwcENvbnRleHQgPSBhcHBsaWNhdGlvbi5hbmRyb2lkLmNvbnRleHQ7XG4gICAgICAgIGxldCBiaXRtYXAgPSBhbmRyb2lkLnByb3ZpZGVyLk1lZGlhU3RvcmUuSW1hZ2VzLk1lZGlhLmdldEJpdG1hcChhcHBDb250ZXh0LmdldENvbnRlbnRSZXNvbHZlcigpLCBpbWFnZVVyaSlcbiAgICAgICAgY29uc29sZS5sb2coXCJiaXRtYXA6IFwiLCBiaXRtYXApO1xuXG4gICAgICAgIHZtLnNldChcImJpdG1hcFwiLCBiaXRtYXApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlU2VuZE11bHRpcGxlSW1hZ2VzKGludGVudDogYW5kcm9pZC5jb250ZW50LkludGVudCkge1xuICAgIGxldCBpbWFnZVVyaXMgPSBpbnRlbnQuZ2V0UGFyY2VsYWJsZUFycmF5TGlzdEV4dHJhKGFuZHJvaWQuY29udGVudC5JbnRlbnQuRVhUUkFfU1RSRUFNKTtcbiAgICBpZiAoaW1hZ2VVcmlzICE9IG51bGwpIHtcbiAgICAgICAgLy8gVXBkYXRlIFVJIHRvIHJlZmxlY3QgbXVsdGlwbGUgaW1hZ2VzIGJlaW5nIHNoYXJlZFxuICAgICAgICBjb25zb2xlLmxvZyhcImltYWdlVXJpczogXCIsIGltYWdlVXJpcyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTXVsdGlwbGUgaW1hZ2VzIHJlY2VpdmVkIVwiKTtcbiAgICB9XG59XG5cbiJdfQ==